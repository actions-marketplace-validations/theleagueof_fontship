#!/usr/bin/env @PYTHON@

flags = {}

__version__ = "@VERSION@"

# This is inscruitable, but basically allows us to take advantage of automake
# knowing where system stuff is without having to process the source in two
# stages to get the final answer here. All this to know where on the system we
# are currently installed!
SRCDIR = "@datarootdir@/fontship/".replace("${prefix}", "@prefix@")

import sys
sys.path.append("@pythondir@/".replace("${prefix}", "@prefix@"))

import click
import fontship
import os
import subprocess

# Workaround for Github Actions usage to make the prebuilt Docker image
# invocation interchangeable with the default run-time built invocation we
# need to set some default arguments. These are not used by the regular CLI.
# See the action.yml file for matching arguments for run-time invocations.
import os
if os.getenv("GITHUB_ACTIONS") and len(sys.argv) == 1:
    sys.argv += ["make", "_gha", "dist"]

@click.group()
@click.option('-d', '--debug', is_flag=True, default=False,
                help="Enable debug mode flags.")
@click.option('-q', '--quiet', is_flag=True, default=False,
                help="Discard all non-error output messages.")
@click.option('-v', '--verbose', is_flag=True, default=False,
                help="Enable extra verbose output from tooling.")
@click.version_option(__version__)
def cli(debug, quiet, verbose):
    """Execute any fontship supported subcommand COMMAND."""
    flags["DEBUG"] = debug
    flags["QUIET"] = quiet
    flags["VERBOSE"] = verbose

@click.command()
@click.pass_context
@click.argument('target', nargs=-1)
def make(ctx, target):
    """Build specified target(s)."""
    args = ['make']
    for fname in ['GNUmakefile', 'makefile', 'Makefile', 'rules.mk']:
        if os.path.isfile(fname):
            args += ['-f', fname]
    args += ['-f', SRCDIR + 'rules.mk']
    for flag in flags:
        if flags[flag]:
            args += [ flag + "=true" ]
    process = subprocess.run(args + list(target), check=True)
    #, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    process

cli.add_command(make)

@click.command()
@click.pass_context
def setup(ctx):
    """Setup Fontship for use on a new Font project."""
    click.echo("Anybody want a peanut?")

cli.add_command(setup)

@click.command()
@click.pass_context
def status(ctx):
    """Show information about setup and build status."""
    repo = fontship.Repo()
    click.echo("Repository: " + repo.path)

cli.add_command(status)

if __name__ == '__main__':
    cli()

# vim: ft=python
